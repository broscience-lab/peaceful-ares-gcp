name: tf-cicd
run-name: Terraform CI/CD

on:
  push:
    branches: [$default-branch]
  pull_request:

jobs:
  tf_ci_cd:
    name: CI/CD pipeline using terraform
    runs-on: "ubuntu-latest"
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate gcloud cli
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          # terraform_version: 1.4.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="bucket=${{ secrets.STATE_BUCKET_NAME }}" \
          -backend-config="prefix=terraform/state" \

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color -input=false \
          -var "gcp_project=${{ secrets.TF_VAR_GCP_PROJECT }}" \
          -var "gcp_region=${{ secrets.TF_VAR_GCP_REGION }}" \
          -var "gcp_zone=${{ secrets.TF_VAR_GCP_ZONE }}" \
          -var "gcs_bucket_name=${{ secrets.TF_VAR_GCS_BUCKET_NAME }}" \
          -var "gar_repository_id=${{ secrets.TF_VAR_GAR_REPOSITORY_ID }}" \
          -var "cloud_run_name=${{ secrets.TF_VAR_CLOUD_RUN_NAME }}" \
          -var "cloud_run_image_name=${{ secrets.TF_VAR_CLOUD_RUN_IMAGE_NAME }}" \
          -var "cloud_run_image_tag=${{ secrets.TF_VAR_CLOUD_RUN_IMAGE_TAG }}" \
          -var "cloud_run_container_port=${{ secrets.TF_VAR_CLOUD_RUN_CONTAINER_PORT }}"
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve -input=false \
          -var "gcp_project=${{ secrets.TF_VAR_GCP_PROJECT }}" \
          -var "gcp_region=${{ secrets.TF_VAR_GCP_REGION }}" \
          -var "gcp_zone=${{ secrets.TF_VAR_GCP_ZONE }}" \
          -var "gcs_bucket_name=${{ secrets.TF_VAR_GCS_BUCKET_NAME }}" \
          -var "gar_repository_id=${{ secrets.TF_VAR_GAR_REPOSITORY_ID }}" \
          -var "cloud_run_name=${{ secrets.TF_VAR_CLOUD_RUN_NAME }}" \
          -var "cloud_run_image_name=${{ secrets.TF_VAR_CLOUD_RUN_IMAGE_NAME }}" \
          -var "cloud_run_image_tag=${{ secrets.TF_VAR_CLOUD_RUN_IMAGE_TAG }}" \
          -var "cloud_run_container_port=${{ secrets.TF_VAR_CLOUD_RUN_CONTAINER_PORT }}"
